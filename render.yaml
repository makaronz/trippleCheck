# Konfiguracja wdrożenia aplikacji FastAPI na Render.com

services:
  # Jedna usługa webowa dla backendu FastAPI + frontendu SvelteKit
  - type: web
    name: pixel-pasta-ai-app # Nazwa usługi w Render
    env: python # Użyj środowiska Python
    region: frankfurt # Wybierz region najbliższy Tobie/Twoim użytkownikom
    plan: free # Wybierz plan (darmowy ma ograniczenia)
    buildCommand: |
      # 1. Zainstaluj zależności backendu
      pip install -r fastapi_app/requirements.txt
      # 2. Zbuduj frontend (Render już ma zainstalowany Node.js)
      cd frontend && npm install && npm run build
      # 3. Wyświetl informacje o strukturze katalogu dla debugowania
      echo "Sprawdzanie struktury katalogów po budowaniu:"
      ls -la frontend/
      ls -la frontend/.svelte-kit/ || echo "Brak katalogu .svelte-kit"
      ls -la frontend/build/ || echo "Brak katalogu build"
      # 4. Utwórz katalog dla plików statycznych
      mkdir -p fastapi_app/app/static/dist
      # 5. Skopiuj zbudowane pliki frontendu do katalogu static backendu
      # Użyjemy prawidłowej ścieżki do zbudowanych plików
      cp -r frontend/.svelte-kit/output/client/* fastapi_app/app/static/dist/ || \
      cp -r frontend/build/* fastapi_app/app/static/dist/ || \
      echo "Nie udało się skopiować plików statycznych. Sprawdź logi powyżej."
    # Komenda do uruchomienia aplikacji w trybie produkcyjnym
    startCommand: cd fastapi_app && gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:$PORT
    # Zmienne środowiskowe (klucz API należy ustawić w panelu Render)
    envVars:
      - key: PYTHON_VERSION # Render wymaga pełnej wersji Pythona (major.minor.patch)
        value: 3.11.5 # Podano pełną wersję z numerem poprawki
      - key: OPENROUTER_API_KEY
        sync: false # Nie synchronizuj z repozytorium, ustaw w panelu Render
      # UWAGA: Tesseract OCR nie jest instalowany w tej konfiguracji.
      # Funkcjonalność OCR dla obrazów/PDF nie będzie działać w produkcji bez modyfikacji.
