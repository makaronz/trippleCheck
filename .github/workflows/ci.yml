name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend tests
  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('fastapi_app/requirements_dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-pol
        tesseract --version
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r fastapi_app/requirements_dev.txt
        pip install pytest pytest-cov black isort mypy
        
    - name: Run code formatting check
      run: |
        black --check fastapi_app/
        isort --check-only fastapi_app/
        
    - name: Run type checking
      run: |
        mypy fastapi_app/
        
    - name: Run tests with coverage
      run: |
        pytest fastapi_app/tests/ --cov=fastapi_app --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  # Frontend tests
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend checks
      run: |
        cd frontend
        npm run check
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-pol
        
    - name: Install dependencies
      run: |
        # Backend
        python -m pip install --upgrade pip
        pip install -r fastapi_app/requirements_dev.txt
        
        # Frontend
        cd frontend
        npm ci
        npm run build
        cd ..
        
    - name: Start application
      run: |
        # Create test environment
        cp .env.example .env
        echo "OPENROUTER_API_KEY=test-key" >> .env
        
        # Start backend in background
        cd fastapi_app
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
        # Test API health
        curl -f http://localhost:8000/ || exit 1
        
    - name: Run integration tests
      run: |
        # Add integration test commands here
        echo "Integration tests would run here"

  # Build and deploy (production)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Build frontend for production
      run: |
        cd frontend
        npm ci
        npm run build
        
    - name: Prepare production build
      run: |
        mkdir -p fastapi_app/app/static/dist
        cp -r frontend/build/* fastapi_app/app/static/dist/
        
    - name: Deploy to Render (webhook)
      run: |
        # Render deployment happens automatically via GitHub integration
        # This step could trigger additional deployment steps if needed
        echo "Deployment triggered for production"

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful"
        else
          echo "❌ Deployment failed"
        fi