# Multi-stage build for FastAPI backend
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    tesseract-ocr \
    tesseract-ocr-pol \
    libreoffice \
    unrar \
    && rm -rf /var/lib/apt/lists/*

# Create and set work directory
WORKDIR /app

# Install Python dependencies
COPY fastapi_app/requirements_dev.txt .
RUN pip install --no-cache-dir -r requirements_dev.txt

# Production stage
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/app/venv/bin:$PATH"

# Install runtime system dependencies
RUN apt-get update && apt-get install -y \
    tesseract-ocr \
    tesseract-ocr-pol \
    libreoffice \
    unrar \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Create and set work directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY fastapi_app/ ./

# Create environment validation script
RUN echo '#!/bin/bash\n\
# Environment validation script\n\
set -e\n\
\n\
# Validate required environment variables\n\
required_vars=("OPENROUTER_API_KEY" "SECRET_KEY")\n\
\n\
for var in "${required_vars[@]}"; do\n\
    if [ -z "${!var}" ]; then\n\
        echo "Error: Required environment variable $var is not set"\n\
        exit 1\n\
    fi\n\
done\n\
\n\
# Validate API key format (basic check)\n\
if [[ ! "$OPENROUTER_API_KEY" =~ ^[a-zA-Z0-9_-]+$ ]]; then\n\
    echo "Warning: OPENROUTER_API_KEY format may be invalid"\n\
fi\n\
\n\
# Set default values for optional variables\n\
export APP_URL="${APP_URL:-http://localhost:8000}"\n\
export APP_TITLE="${APP_TITLE:-trippleCheck}"\n\
export PORT="${PORT:-8000}"\n\
export HOST="${HOST:-0.0.0.0}"\n\
\n\
echo "Environment validation passed"\n\
\n\
# Start the application\n\
exec "$@"' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

# Set ownership to app user
RUN chown -R appuser:appuser /app

# Switch to app user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/ || exit 1

# Expose port
EXPOSE 8000

# Use entrypoint for environment validation
ENTRYPOINT ["/app/entrypoint.sh"]

# Start application
CMD ["gunicorn", "app.main:app", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000"]